// <auto-generated />
using System;
using Dbcontext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace kiddoshielddotnet.Migrations
{
    [DbContext(typeof(KiddoDBContext))]
    [Migration("20240316114617_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Models.Appointment", b =>
                {
                    b.Property<int>("Aid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cid")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Hid")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time(6)");

                    b.Property<int>("Uid")
                        .HasColumnType("int");

                    b.Property<string>("Vname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Aid");

                    b.HasIndex("Hid");

                    b.HasIndex("Uid");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("Models.Child", b =>
                {
                    b.Property<int>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Bloodgrp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cfname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Dob")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Uid")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Cid");

                    b.HasIndex("Uid");

                    b.ToTable("Child");
                });

            modelBuilder.Entity("Models.ConsultationAppointment", b =>
                {
                    b.Property<int>("Caid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("caid");

                    b.Property<int>("Cid")
                        .HasColumnType("int")
                        .HasColumnName("cid");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("contact");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("Did")
                        .HasColumnType("int")
                        .HasColumnName("did");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("specialization");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time")
                        .HasColumnName("time");

                    b.Property<int>("Uid")
                        .HasColumnType("int")
                        .HasColumnName("uid");

                    b.HasKey("Caid");

                    b.HasIndex("Did");

                    b.HasIndex("Uid");

                    b.ToTable("ConsultationAppointments");
                });

            modelBuilder.Entity("Models.Doctor", b =>
                {
                    b.Property<int>("Did")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("did");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("contact");

                    b.Property<string>("Dfname")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("dfname");

                    b.Property<string>("Dlname")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("dlname");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<int>("Hid")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("specialization");

                    b.HasKey("Did");

                    b.HasIndex("Hid");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Models.Feedback", b =>
                {
                    b.Property<int>("Fid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<int>("Hid")
                        .HasColumnType("int");

                    b.Property<string>("Msg")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("msg");

                    b.Property<int>("Uid")
                        .HasColumnType("int");

                    b.HasKey("Fid");

                    b.HasIndex("Hid");

                    b.HasIndex("Uid");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Models.Hospital", b =>
                {
                    b.Property<int>("Hid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("hid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("address");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("contact");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Emergencynum")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("emergencynum");

                    b.Property<string>("Hname")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("hname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.HasKey("Hid");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("uid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("address");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("contact");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("fname");

                    b.Property<int>("Hid")
                        .HasColumnType("int");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("lname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Uid");

                    b.HasIndex("Hid");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Models.Vaccine", b =>
                {
                    b.Property<int>("Vid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("vid");

                    b.Property<int>("Avdoses")
                        .HasColumnType("int")
                        .HasColumnName("avdoses");

                    b.Property<int>("Hid")
                        .HasColumnType("int");

                    b.Property<string>("Vname")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("vname");

                    b.HasKey("Vid");

                    b.HasIndex("Hid");

                    b.ToTable("Vaccine");
                });

            modelBuilder.Entity("Models.Appointment", b =>
                {
                    b.HasOne("Models.Hospital", "Hospital")
                        .WithMany("Appointments")
                        .HasForeignKey("Hid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("Uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Child", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("Children")
                        .HasForeignKey("Uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.ConsultationAppointment", b =>
                {
                    b.HasOne("Models.Doctor", "Doctor")
                        .WithMany("ConsultationAppointments")
                        .HasForeignKey("Did")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("ConsultationAppointments")
                        .HasForeignKey("Uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Doctor", b =>
                {
                    b.HasOne("Models.Hospital", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("Hid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Models.Feedback", b =>
                {
                    b.HasOne("Models.Hospital", "Hospital")
                        .WithMany("Feedbacks")
                        .HasForeignKey("Hid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("Uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.HasOne("Models.Hospital", "Hospital")
                        .WithMany("Users")
                        .HasForeignKey("Hid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Models.Vaccine", b =>
                {
                    b.HasOne("Models.Hospital", "Hospital")
                        .WithMany("Vaccines")
                        .HasForeignKey("Hid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Models.Doctor", b =>
                {
                    b.Navigation("ConsultationAppointments");
                });

            modelBuilder.Entity("Models.Hospital", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Doctors");

                    b.Navigation("Feedbacks");

                    b.Navigation("Users");

                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Children");

                    b.Navigation("ConsultationAppointments");

                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
